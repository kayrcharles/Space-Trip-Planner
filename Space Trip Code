#include <iostream>
#include <iomanip>
using namespace std;

//global variables
const char MERCURY = 'M';
const char VENUS = 'V';
const char MARS = 'R';
const char JUPITER = 'J';
const char SATURN = 'S';
const char URANUS = 'U';
const char NEPTUNE = 'N';
const char INNER = 'I';
const char OUTER = 'O';
const float BASE_COST_INNER = 10000.00;
const float BASE_COST_OUTER = 40000.00;
const float SIZE_UPCHARGE = 1000.00;
const float UPGRADE_COST = 2000.00;
const float ACTIVITY_COST = 1000.00;
const float DISCOUNT = 3000.00;

//----------------------------------------------------------------------
//Function: setDestination
//Purpose: To get the user's destination choice
//Parameters: char &destinationChoice, char &destinationType
//Returns: N/A
//----------------------------------------------------------------------
void setDestination(char &destinationChoice, char &destinationType)
{
    //get type of destination
    cout << "What type of destination are you planning to visit? Type (I) for inner or (O) for outer." << endl;
    cin >> destinationType;
    destinationType = toupper(destinationType);

    // error checking for destinationType
    while(destinationType != INNER && destinationType != OUTER)
    {
        cout << "Invalid choice! Try again." << endl;
        cin >> destinationType;
        destinationType = toupper(destinationType);
    }
    
    //get destinationChoice
    if(destinationType == INNER)
    {
        cout << "\nWhich destination would you like to plan for?" << endl;
        cout << "<\tM ~ for Mercury                     $10000.00       >" << endl;
        cout << "<\tV ~ for Venus                       $10000.00       >" << endl;
        cout << "<\tR ~ for Mars                        $10000.00       >" << endl;
    }
    
    if(destinationType == OUTER)
    {
        cout << "<\tJ ~ for Jupiter                     $40000.00       >" << endl;
        cout << "<\tS ~ for Saturn                      $40000.00       >" << endl;
        cout << "<\tU ~ for Uranus                      $40000.00       >" << endl;
        cout << "<\tN ~ for Neptune                     $40000.00       >" << endl;
    }
  
    cin >> destinationChoice; //get input 
    destinationChoice = toupper(destinationChoice);
  
    while ((destinationType == INNER && (destinationChoice != MERCURY && destinationChoice != VENUS && destinationChoice != MARS)) ||
       (destinationType == OUTER && (destinationChoice != JUPITER && destinationChoice != SATURN && destinationChoice != URANUS && destinationChoice != NEPTUNE)))
    {
        if(destinationType == INNER){
            // Display error message and available choices
            cout << "\nOops! Your choice is not included in the list. Try again." << endl;
            cout << "\nWhich destination would you like to plan for?" << endl;
            cout << "<\tM ~ for Mercury                     $10000.00       >" << endl;
            cout << "<\tV ~ for Venus                       $10000.00       >" << endl;
            cout << "<\tR ~ for Mars                        $10000.00       >" << endl;
        }
        if (destinationType == OUTER)
        {
            cout << "\nOops! Your choice is not included in the list. Try again." << endl;
            cout << "<\tJ ~ for Jupiter                     $40000.00       >" << endl;
            cout << "<\tS ~ for Saturn                      $40000.00       >" << endl;
            cout << "<\tU ~ for Uranus                      $40000.00       >" << endl;
            cout << "<\tN ~ for Neptune                     $40000.00       >" << endl;
        }

    // Get input again
    cin >> destinationChoice;
    destinationChoice = toupper(destinationChoice);
    }
}

//----------------------------------------------------------------------
//Function: setTripDuration
//Purpose: To determine the duration of the trip
//Parameters: N/A
//Returns: int - selected trip duration
//----------------------------------------------------------------------
int setTripDuration()
{
    int duration = 0;
    cout << "How many days would you like to take this trip? ";
    cin >> duration;
    cout << endl;
    
    return(duration);
}


//----------------------------------------------------------------------
//Function: addUpgrade
//Purpose: Ask user whether or not they want to upgrade their trip
//Parameters: bool &upgrade
//Return: N/A
//----------------------------------------------------------------------
void addUpgrade(bool & upgrade)
{
    char choice;
    cout << "Do you want to upgrade your ship cabin to First Class for an additional $2,000? (Y/N) ";
    cin >> choice;
    choice = toupper(choice);
    cout << endl;
    
    if (choice == 'Y')
        upgrade = true;
    else if (choice == 'N')
        upgrade = false;
    else 
    {
        cout << "Invalid response! Y for yes or N for no. ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
    }
    
    //error handling 
    while (choice != 'Y' && choice != 'N')
    {
        cout << "Invalid response! Please enter Y for yes or N for no: ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
    }

    if (choice == 'Y')
        upgrade = true;
    else
        upgrade = false;

}

//----------------------------------------------------------------------
//Function: addInsurance
//Purpose: Ask user whether or not they want to add insurance to their trip
//Parameters: bool &insurance
//Return: N/A
//----------------------------------------------------------------------
void addInsurance(bool & insurance)
{
    char choice;
    cout << "Do you want to add insurance for $1,000? (Y/N) ";
    cin >> choice;
    choice = toupper(choice);
    cout << endl;

    //error handling 
    while (choice != 'Y' && choice != 'N')
    {
        cout << "Invalid response! Please enter Y for yes or N for no: ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
    }

    if (choice == 'Y')
        insurance = true;
    else
        insurance = false;
}

//----------------------------------------------------------------------
//Function: addExtra
//Purpose: Ask user whether or not they want to add any extra activities to their trip
//Parameters: bool &extra, const char destination
//Return: N/A
//----------------------------------------------------------------------
void addExtra(bool & extra, const char destination)
{
    char choice;
    cout << "Do you want to add ";
    
    switch(destination)
    {
        case MERCURY:
        cout << "a surface exploration of Mars for an extra $1,000? (Y/N) ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
        break;
        
        case VENUS:
        cout << "an atmospheric balloon ride of Venus for an extra $1,000? (Y/N) ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
        break;
        
        case MARS:
        cout << "a rover exploration of Mars for an extra $1,000? (Y/N) ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
        break;
        
        case JUPITER:
        cout << "an equator tour of Jupiter for an extra $1,000? (Y/N) ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
        break;
        
        case SATURN:
        cout << "a ring excursion of Saturn for an extra $1,000? (Y/N) ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
        break;
        
        case URANUS:
        cout << "a moons visit of Uranus for an extra $1,000? (Y/N) ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
        break;
        
        case NEPTUNE:
        cout << "deep space exploration of Neptune for an extra $1,000? (Y/N) ";
        cin >> choice;
        choice = toupper(choice);
        cout << endl;
        break;
        
    }
        if (choice == 'Y')
            extra = true;
        else if (choice == 'N')
            extra = false;
        else
        {
        cout << "Invalid choice! Please enter Y for yes or N for no." << endl;
        cin >> choice;
        choice = toupper(choice);
        }
        
}

//----------------------------------------------------------------------
//Function: addMore
//Purpose: Ask user whether or not they want to add more destinations to their trip
//Parameters: None
//Return: bool - true if they want to add more, otherwise false
//----------------------------------------------------------------------
bool addMore()
{
    char choice;
    cout << "Would you like to add more destinations to your trip? (Y/N)" << endl;
    cin >> choice;
    choice = toupper(choice);
    
    if (choice == 'Y')
        return true;
    else if (choice == 'N')
        return false;
        
    if (choice != 'Y' && choice != 'N')
    {
        cout << "Invalid choice! Please type (Y) for yes or (N) for no: ";
        choice = toupper(choice);
    }
    
    return (choice);
}

//----------------------------------------------------------------------
//Function: getDiscount
//Purpose: give the customer a $3000 discount if they book multiple destinations
//Parameter: int numDestinations
//Return: float - discount amount
//----------------------------------------------------------------------
float getDiscount(int numDestinations)
{
    return ((numDestinations - 1) * DISCOUNT);
}

//----------------------------------------------------------------------
//Function: getTripCost
//Purpose: To calculate cost of a trip and add to subtotal
//Parameters:  const char destination, const int duration, const bool upgrade, const bool insurance, const bool extra 
//Returns: float - cost of the trip
//----------------------------------------------------------------------
float getTripCost(const char destination, const int duration, const bool upgrade, const bool insurance, const bool extra)
{
    float cost = 0;
    
    //add base cost of destination choice
    if(destination == INNER)
        cost += BASE_COST_INNER;
    else if (destination == OUTER)
        cost += BASE_COST_OUTER;
    
    //add upcharge for longer duration   
    cost += (duration - 1) * SIZE_UPCHARGE; // $1000 per additional day
    
    //add upcharge for upgrade
    if(upgrade)
        cost += UPGRADE_COST;
    
    //add insurance cost
    if(insurance)
        cost += 1000.00;
    
    //add extra activity cost
    if(extra)
        cost += ACTIVITY_COST;
    
    return cost;
}


//----------------------------------------------------------------------
//Function: reset
//Purpose: Resets local trip variables
//Parameters:   char &destinationChoice, int &tripDuration, char &destinationType, 
// bool &extra, bool &upgrade, bool &insurance, float &tripCost
//Return: N/A
//----------------------------------------------------------------------
void reset(char &destinationChoice, int &tripDuration, char &destinationType, bool &extra, bool &upgrade, bool &insurance, float &tripCost)
{
    cout << "Would you like to reset your trip plans? (Y/N)" << endl;
    char choice;
    choice = toupper(choice);
    cin >> choice;
    
    if (choice == 'Y' || choice == 'y')
        {
            destinationChoice = 'm';
            tripDuration = 0;
            destinationType = 'm';
            extra = false;
            upgrade = false;
            insurance = false;
            tripCost = 0.0;
        }
        
    while (choice != 'Y' && choice != 'N')
    {
        cout << "Invalid choice! Please type (Y) for yes or (N) for no: ";
        choice = toupper(choice);
        cin >> choice;
    }
}

//----------------------------------------------------------------------
//Function: confirmTrip
//Purpose: to confirm the trip details before calculating the total cost
//Parameters: const char destination, const int duration, const char type, const bool extra
//Return: bool - confirms all selection are correct
//----------------------------------------------------------------------
bool confirmTrip(const char userDestination, const char userType, const int userDuration, const bool userExtra)
{
    string confirmedDestination, confirmedType, confirmedExtra;
    char choice;
    
    cout << "Let's make sure the trip details are correct." << endl;
    
    switch(userDestination)
    {
        case MERCURY: 
            confirmedDestination = "Mercury"; 
            if(userExtra)
                confirmedExtra = "surface exploration";
            break;
        case VENUS: 
            confirmedDestination = "Venus"; 
            if(userExtra)
                confirmedExtra = "atmospheric balloon ride";
            break;
        case MARS: 
            confirmedDestination = "Mars"; 
            if(userExtra)
                confirmedExtra = "rover exploration";
            break;
        case JUPITER: 
            confirmedDestination = "Jupiter"; 
            if(userExtra)
                confirmedExtra = "equator tour";
            break;
        case SATURN: 
            confirmedDestination = "Saturn"; 
            if(userExtra)
                confirmedExtra = "ring excursion";
            break;
        case URANUS: 
            confirmedDestination = "Uranus"; 
            if(userExtra)
                confirmedExtra = "moons visit";
            break;
        case NEPTUNE: 
            confirmedDestination = "Neptune"; 
            if(userExtra)
                confirmedExtra = "deep space exploration";
            break;
    }
    
    if (userType == INNER)
        confirmedType = "inner";
    else
        confirmedType = "outer";
    
    if(userExtra)    
        cout << "You have planned a " << confirmedType << " trip to " << confirmedDestination << " with an additional " << confirmedExtra << "." << endl;
    else 
        cout << "You have planned a " << confirmedType << " trip to " << confirmedDestination << "." << endl;
        
    //check with user if everything is correct
	cout << "If everything seems correct, type (Y) for yes. Otherwise, type (N) for no." << endl;
	cin >> choice;
	choice = toupper(choice);
	while(choice != 'Y' && choice != 'N')
	{
		cout << "You entered an invalid input. Try again." << endl;
		cin >> choice;
		choice = toupper(choice);
	}

	//return true if Y
	if (choice == 'Y')
		return true;
	else
		return false;    
}
//----------------------------------------------------------------------
//Function: printBill
//Purpose: print item quantity, subtotal, and total for the trip
//Parameters: const float subtotal, const int quantity
//Return: N/A
//----------------------------------------------------------------------
void printBill(const float subtotal, const int quantity) {
    int numDestinations = quantity; // Number of destinations
    int discount = getDiscount(numDestinations);

    
    //print details
    cout << "Your trip details: " << endl;
    cout << "****************************************************************" << endl;
    
    cout << "\tNumber of destinations: " << quantity << endl;
    cout << "\tSubtotal: " << subtotal << endl;
    cout << "\tDiscount: " << discount << endl;
    cout << "\tTotal: " << (subtotal - discount) << endl;
    
    cout << "****************************************************************" << endl;
}

int main ()
{
    //banner
    cout << "\t******************************************************" << endl;
    cout << "\t\tWelcome to your Space Exploration Trip!" << endl;
    cout << "\t\t   Let's plan your dream adventure" << endl;
    cout << "\t******************************************************" << endl;
    
    //local banners
    char destinationChoice, destinationType;
    bool upgrade = false, insurance = false, extra = false;
    char destination = 'm';
    float subtotal = 0.0;
    int quantity = 0;
    int duration = 0;
    char userType, userDestination;
    bool userExtra;
    bool confirmed;
    int userDuration;
    int numDestinations = 0;
    
    
    //do-while loop to add more trips to destination
    do {
        setDestination(userDestination, userType);
    
    duration = setTripDuration();
    userDuration = duration;
    
    addUpgrade(upgrade);
    addInsurance(insurance);
    addExtra(userExtra, userDestination);
    reset(userDestination, userDuration, userType, userExtra, upgrade, insurance, subtotal);
   
    confirmed = confirmTrip(userDestination, userType, userDuration, userExtra);
    
    quantity++;
    destination = userType;
    subtotal += getTripCost(destination, duration, upgrade, insurance, userExtra);
    if (confirmed)
        printBill(subtotal, quantity);
    } while (addMore());
    
    //banner
    cout << "\t******************************************************" << endl;
    cout << "\t\tThank you for planning your trip with us!" << endl;
    cout << "\t\t              Have Fun" << endl;
    cout << "\t******************************************************" << endl;
    
    return 0;
}

